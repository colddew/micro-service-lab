pipeline {
    agent any
    environment {
        HARBOR_CREDS = credentials('harbor-creds')
        K8S_CONFIG = credentials('k8s-jenkins ')
        HARBOR_HOST = 'harbor.local'
    }
    tools {
        git 'Default'
        gradle 'gradle-5.3.1'
        maven 'maven-3.6.1'
    }
    stages {
        stage('gradle test') {
            agent any
            steps {
                dir("${WORKSPACE}/micro-service-gradle"){
                    sh 'gradle -Pci clean test'
                }
                junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/build/test-results/test/**/*.xml'

                dir("${WORKSPACE}/micro-service-gradle"){
                    sh 'gradle -Pci codeCoverageReport'
                }
                jacoco classPattern: '**/build/classes', execPattern: '**/build/jacoco/**.exec'

                stash excludes: '**/build/**', includes: '**', name: 'source'
            }
        }
        stage('docker build') {
            agent {
                node {
                    label 'master'
                }
            }
            steps {
                unstash 'source'
                dir("${WORKSPACE}/micro-service-gradle"){
//                    sh 'gradle -Pci -x test build docker'
                    sh 'gradle -Pci -x test build dockerTag'
                    sh "docker login -u ${HARBOR_CREDS_USR} -p ${HARBOR_CREDS_PSW} ${HARBOR_HOST}"
                    sh 'gradle -Pci -x test dockerPushHarbor'
                    sh 'gradle -Pci -x test removeLocalTagDockerImage removeLocalDockerImage'
                }
            }
        }
        stage('k8s deploy') {
            agent {
                docker {
                    image 'lwolf/helm-kubectl-docker'
                }
            }
            steps {
                unstash 'source'
                sh 'mkdir -p ~/.kube'
                sh "echo ${K8S_CONFIG} | base64 -d > ~/.kube/config"
                dir("${WORKSPACE}/micro-service-gradle/k8s"){
                    script {
                        try {
                            sh 'kubectl delete -f .'
                        } catch(Exception e) {
                            println e
                        }
                    }
                    sh 'sleep 5s'
                    sh 'kubectl apply -f .'
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}